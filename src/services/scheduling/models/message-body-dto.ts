// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { MessageDto, messageDto, messageDtoRequest, messageDtoResponse } from './message-dto';

/**
 * The shape of the model inside the application code - what the users use
 */
export const messageBodyDto = z.lazy(() => {
  return z.object({
    segmentIds: z.array(z.string()).optional(),
    allLeads: z.boolean(),
    message: messageDto,
  });
});

/**
 *
 * @typedef  {MessageBodyDto} messageBodyDto
 * @property {string[]}
 * @property {boolean}
 * @property {MessageDto}
 */
export type MessageBodyDto = z.infer<typeof messageBodyDto>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const messageBodyDtoResponse = z.lazy(() => {
  return z
    .object({
      segment_ids: z.array(z.string()).optional(),
      all_leads: z.boolean(),
      message: messageDtoResponse,
    })
    .transform((data) => ({
      segmentIds: data['segment_ids'],
      allLeads: data['all_leads'],
      message: data['message'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const messageBodyDtoRequest = z.lazy(() => {
  return z
    .object({
      segmentIds: z.array(z.string()).optional(),
      allLeads: z.boolean(),
      message: messageDtoRequest,
    })
    .transform((data) => ({
      segment_ids: data['segmentIds'],
      all_leads: data['allLeads'],
      message: data['message'],
    }));
});
