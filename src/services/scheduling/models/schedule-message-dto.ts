// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { MessageBodyDto, messageBodyDto, messageBodyDtoRequest, messageBodyDtoResponse } from './message-body-dto';

/**
 * The shape of the model inside the application code - what the users use
 */
export const scheduleMessageDto = z.lazy(() => {
  return z.object({
    messageBody: messageBodyDto,
    token: z.string(),
    messageDelay: z.string(),
    userId: z.string(),
    campaignName: z.string(),
    campaignDescription: z.string(),
    campaignGoals: z.array(z.string()),
    segmentName: z.string(),
  });
});

/**
 *
 * @typedef  {ScheduleMessageDto} scheduleMessageDto
 * @property {MessageBodyDto}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string[]}
 * @property {string}
 */
export type ScheduleMessageDto = z.infer<typeof scheduleMessageDto>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const scheduleMessageDtoResponse = z.lazy(() => {
  return z
    .object({
      messageBody: messageBodyDtoResponse,
      token: z.string(),
      messageDelay: z.string(),
      userId: z.string(),
      campaignName: z.string(),
      campaignDescription: z.string(),
      campaignGoals: z.array(z.string()),
      segmentName: z.string(),
    })
    .transform((data) => ({
      messageBody: data['messageBody'],
      token: data['token'],
      messageDelay: data['messageDelay'],
      userId: data['userId'],
      campaignName: data['campaignName'],
      campaignDescription: data['campaignDescription'],
      campaignGoals: data['campaignGoals'],
      segmentName: data['segmentName'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const scheduleMessageDtoRequest = z.lazy(() => {
  return z
    .object({
      messageBody: messageBodyDtoRequest,
      token: z.string(),
      messageDelay: z.string(),
      userId: z.string(),
      campaignName: z.string(),
      campaignDescription: z.string(),
      campaignGoals: z.array(z.string()),
      segmentName: z.string(),
    })
    .transform((data) => ({
      messageBody: data['messageBody'],
      token: data['token'],
      messageDelay: data['messageDelay'],
      userId: data['userId'],
      campaignName: data['campaignName'],
      campaignDescription: data['campaignDescription'],
      campaignGoals: data['campaignGoals'],
      segmentName: data['segmentName'],
    }));
});
