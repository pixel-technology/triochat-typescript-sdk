// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { ThrowableError } from '../../http/errors/throwable-error';
import { Environment } from '../../http/environment';
import { SdkSendMessageDto, sdkSendMessageDtoRequest, sdkSendMessageDtoResponse } from './models/sdk-send-message-dto';

export class SdkService extends BaseService {
  /**
   *
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<SdkSendMessageDto[]>>} Message sent successfully
   */
  async sdkControllerSendMessage(
    body: SdkSendMessageDto,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<SdkSendMessageDto[]>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/sdk/send-message')
      .setRequestSchema(sdkSendMessageDtoRequest)
      .addAccessTokenAuth(this.config.token)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: z.array(sdkSendMessageDtoResponse),
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.NoContent,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.NoContent,
        status: 401,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<SdkSendMessageDto[]>(request);
  }
}
