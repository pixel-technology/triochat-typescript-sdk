// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const messageDto = z.lazy(() => {
  return z.object({
    messageType: z.string(),
    messageText: z.string().optional(),
    components: z.array(z.string()).optional(),
    templateName: z.string().optional(),
  });
});

/**
 *
 * @typedef  {MessageDto} messageDto
 * @property {string}
 * @property {string}
 * @property {string[]}
 * @property {string}
 */
export type MessageDto = z.infer<typeof messageDto>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const messageDtoResponse = z.lazy(() => {
  return z
    .object({
      messageType: z.string(),
      messageText: z.string().optional(),
      components: z.array(z.string()).optional(),
      template_name: z.string().optional(),
    })
    .transform((data) => ({
      messageType: data['messageType'],
      messageText: data['messageText'],
      components: data['components'],
      templateName: data['template_name'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const messageDtoRequest = z.lazy(() => {
  return z
    .object({
      messageType: z.string(),
      messageText: z.string().optional(),
      components: z.array(z.string()).optional(),
      templateName: z.string().optional(),
    })
    .transform((data) => ({
      messageType: data['messageType'],
      messageText: data['messageText'],
      components: data['components'],
      template_name: data['templateName'],
    }));
});
